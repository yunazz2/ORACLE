
-- 70. 주어진 'community.dmp' 덤프 파일을 'joeun' 계정에 import하는 명령어를 작성하시오.
-- 덤프 파일 IMPORT하기 (CMD에서 실행)
--imp userid=system/123456 file=D:\LYN\SQL\community.dmp fromuser=joeun touser=joeun

-- 71. 사용중인 계정(joeun)이 소유하고있는 데이터를 'community2.dmp' 덤프 파일로 export 하는 명령어를 작성하시오.
-- 덤프 파일 EXMPORT하기 (CMD에서 실행)
-- exp userid=덤프파일생성계정/123456 file=덤프파일경로 log=로그파일경로
--exp userid=joeun/123456 file=D:\LYN\SQL\community2.dmp log=D:\LYN\SQL\community2.log

-- 72.
-- 1-1) MS_BOARD 테이블의 WRITER 속성의 타입을 NUMBER로 변경하시오.
ALTER TABLE MS_BOARD MODIFY WRITER NUMBER;

-- 1-2) MS_BOARD 테이블의 WRITER 속성에 대하여, MS_USER의 USER_NO를 참조하는 외래키를 지정하시오.
-- 외래키 지정
-- ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명
-- FOREIGN KEY (외래키컬럼) REFERENCES 참조테이블(기본키);
ALTER TABLE MS_BOARD ADD CONSTRAINT MS_BOARD_WRITER_FK
FOREIGN KEY (WRITER) REFERENCES MS_USER(USER_NO);

-- 2) 테이블 MS_FILE 의 BOARD_NO 속성을 테이블 MS_BOARD 의 BOARD_NO 를 참조하는 외래키로 지정하는 SQL 문을 작성하시오.
ALTER TABLE MS_FILE ADD CONSTRAINT MS_FILE_BOARD_NO_FK
FOREIGN KEY (BOARD_NO) REFERENCES MS_BOARD(BOARD_NO);

-- 3) 테이블 MS_REPLY 의 BOARD_NO 속성을 테이블 MS_BOARD 의 BOARD_NO 를 참조하는 외래키로 지정하는 SQL 문을 작성하시오.
ALTER TABLE MS_REPLY ADD CONSTRAINT MS_REPLY_BOARD_NO_FK
FOREIGN KEY (BOARD_NO) REFERENCES MS_BOARD(BOARD_NO);

-- 제약 조건 삭제
-- ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건명;

-- 73. MS_USER에 CTZ_NO(CHAR(14))와 GENDER(CHAR(6)) 속성을 추가하시오.
ALTER TABLE MS_USER ADD CTZ_NO CHAR(14) NULL UNIQUE;
ALTER TABLE MS_USER ADD GENDER CHAR(6) NULL;

COMMENT ON COLUMN MS_USER.CTZ_NO IS '주민번호';
COMMENT ON COLUMN MS_USER.GENDER IS '성별';

DESC MS_USER;

-- 74. MS_USER 의 GENDER 속성이 (‘여‘, ‘남‘, ‘기타‘) 값을 갖도록 하는 제약조건을 추가하는 SQL 문을 작성하시오.
-- 체크 제약조건
ALTER TABLE MS_USER ADD CONSTRAINT MS_USER_GENDER_CHECK
CHECK (gender IN ('여', '남', '기타'));

-- 75. MS_FILE 테이블에 확장자(EXT) 속성을 추가하시오.
ALTER TABLE MS_FILE ADD EXT VARCHAR2(10) NULL;
COMMENT ON COLUMN MS_FILE.EXT IS '확장자';

DESC MS_FILE;

-- 76. 테이블 MS_FILE 의 FILE_NAME 속성에서 확장자를 추출하여 EXT 속성에 UPDATE 하는 SQL 문을 작성하시오.
/*
    조건
    - FILE_NAME에서 추출한 확장자가 jpeg, jpg, gif, png가 아니면 삭제한다.
    - FILE_NAME에서 추출한 확장자를 EXT 속성에 UPDATE 한다.
*/
MERGE INTO MS_FILE T        -- 대상 테이블 지정 ('T'는 별칭임)
-- 사용할 데이터의 자원을 지정
USING (SELECT FILE_NO, FILE_NAME FROM MS_FILE) F
-- ON (update 될 조건)
ON (T.FILE_NO = F.FILE_NO)
-- 매치조건에 만족한 경우
WHEN MATCHED THEN
    -- SUBSTER(문자열, 시작번호)
    UPDATE SET T.EXT = SUBSTR(F.FILE_NAME, INSTR(F.FILE_NAME, '.', -1) +1)
    DELETE WHERE SUBSTR(F.FILE_NAME, INSTR(F.FILE_NAME, '.', -1) +1)
            NOT IN ('jpeg', 'jpg', 'gif', 'png')
-- WHEN NOT MATCHED THEN
-- [매치가 안될 때,]
;

SELECT * FROM MS_FILE;


-- 유저 추가
INSERT INTO MS_USER (USER_NO, USER_ID, USER_PW, USER_NAME, BIRTH, TEL, ADDRESS, REG_DATE, UPD_DATE, CTZ_NO, GENDER)
VALUES (1, 'JOEUN', '123456', '김조은', TO_DATE('2020/01/01', 'YYYY/MM/DD'), '010-1234-1234', '부평', sysdate, sysdate, '200101-3344444', '남');

-- 게시글 추가
INSERT INTO MS_BOARD (BOARD_NO, TITLE, CONTENT, WRITER, HIT, LIKE_CNT,
                        DEL_YN, DEL_DATE, REG_DATE, UPD_DATE)
VALUES (1, '제목', '내용', 1, 0, 0, 'N', NULL, sysdate, sysdate);

-- 파일 추가
INSERT INTO MS_FILE (FILE_NO, BOARD_NO, FILE_NAME, FILE_DATA, REG_DATE, UPD_DATE, EXT)
VALUES (1, 1, '강아지.png', '123', sysdate, sysdate, 'png');

INSERT INTO MS_FILE (FILE_NO, BOARD_NO, FILE_NAME, FILE_DATA, REG_DATE, UPD_DATE, EXT)
VALUES (2, 1, 'Main.fxml', '123', sysdate, sysdate, '---');


SELECT * FROM MS_USER;
SELECT * FROM MS_BOARD;
SELECT * FROM MS_FILE;

-- 77. 테이블 MS_FILE 의 EXT 속성이 (‘jpg’, ‘jpeg’, ‘gif’, ‘png’) 값을 갖도록 하는 제약조건을 추가하는 SQL문을 작성하시오.
ALTER TABLE MS_FILE ADD CONSTRAINT MS_FILE_EXT_CHECK
CHECK (EXT IN('jpg', 'jpeg', 'gif', 'png'));

INSERT INTO MS_FILE (FILE_NO, BOARD_NO, FILE_NAME, FILE_DATA, REG_DATE, UPD_DATE, EXT)
VALUES (3, 1, 'Main.java', '123', sysdate, sysdate, 'java');

INSERT INTO MS_FILE (FILE_NO, BOARD_NO, FILE_NAME, FILE_DATA, REG_DATE, UPD_DATE, EXT)
VALUES (4, 1, '고양이.jpg', '123', sysdate, sysdate, 'jpg');

-- 78.
-- MS_USER, MS_BOARD, MS_FILE, MS_REPLY 테이블의 모든 데이터를 삭제하는 명령어를 작성하시오.
TRUNCATE TABLE MS_USER;
TRUNCATE TABLE MS_BOARD;
TRUNCATE TABLE MS_FILE;
TRUNCATE TABLE MS_REPLY;

DELETE FROM MS_USER;
DELETE FROM MS_BOARD;
DELETE FROM MS_FILE;
DELETE FROM MS_REPLY;

SELECT * FROM MS_USER;
SELECT * FROM MS_BOARD;
SELECT * FROM MS_FILE;
SELECT * FROM MS_REPLY;

/*
    DELETE vs TRUNCATE
    * DELETE : 데이터 조작어(DML)
    - 한 행 단위로 데이터를 삭제한다
    - COMMIT, ROLLBACK을 이용하여 변경사항을 적용하거나 되돌릴 수 있음
    
    * TRUNCATE : 데이터 정의어(DDL)
    - 모든 행을 삭제한다
    - 삭제된 데이터를 되돌릴 수 없다
*/

-- 79. 
-- 1). [MS_BOARD] 테이블의 WRITER 속성을 삭제하시오.
-- 2). [MS_FILE] 테이블의 BOARD_NO 속성을 삭제하시오.
-- 3). [MS_REPLY] 테이블의 BOARD_NO 속성을 삭제하시오.
ALTER TABLE MS_BOARD DROP COLUMN WRITER;
ALTER TABLE MS_FILE DROP COLUMN BOARD_NO;
ALTER TABLE MS_REPLY DROP COLUMN BOARD_NO;

-- 80. 각 테이블에 속성들을 추가한 뒤, 외래키로 지정하시오.
-- 해당 외래키에 대하여 참조 테이블의 데이터 삭제 시,
-- 연결된 속성의 값도 삭제하는 옵션도 지정하시오.

-- 1). [MS_BOARD] 테이블의 WRITER 속성을 추가하시오.
-- 1-1) MS_BOARD 의 WRITER 속성을 MS_USER 의 USER_NO 를 참조하는 외래키로 지정하시오.
-- 1-2) 참조 테이블의 데이터 삭제 시, 연쇄적으로 삭제되도록 옵션을 지정하시오.
-- MS_BOARD에 WRITER 속성 추가
ALTER TABLE MS_BOARD ADD WRITER NUMBER NOT NULL;

-- WRITER 속성을 외래키로 지정
-- 참조 테이블 데이터 삭제시 연쇄적으로 함께 삭제하는 옵션 지정
ALTER TABLE MS_BOARD
ADD CONSTRAINT MS_BOARD_WRITER_FK
FOREIGN KEY (WRITER) REFERENCES MS_USER(USER_NO)
ON DELETE CASCADE; -- 외래키에 대한 삭제 옵션(?)을 준 것
/*
-- ON DELETE [NO ACTION, RESTRICT, CASCADE, SET NULL]
-- * RESTRICT : 자식 테이블의 데이터가 존재하면 삭제 안함
-- * CASCADE  : 자식 테이블의 데이터도 함께 삭제
-- * SET NULL : 자식 테이블의 데이터를 NULL로 변경
*/

-- 2) [MS_FILE] 테이블의 BOARD_NO 속성을 추가하시오.
-- 2-1). MS_FILE 의 BOARD_NO 속성을 MS_BOARD 의 BOARD_NO 를 참조하는 외래키로 지정하시오.
-- 2-2). 참조 테이블의 데이터 삭제 시, 연쇄적으로 삭제되도록 옵션을 지정하시오.
ALTER TABLE MS_FILE ADD BOARD_NO NUMBER NOT NULL;
-- BOARD_NO 속성을 외래키로 추가
-- 참조 테이블 : MS_BOARD, 참조 속성 : BOARD_NO
-- 참조 테이블 데이터 삭제시 연쇄적으로 함께 삭제되는 옵션 지정
ALTER TABLE MS_FILE
ADD CONSTRAINT MS_FILE_BOARD_NO_FK
FOREIGN KEY (BOARD_NO) REFERENCES MS_BOARD(BOARD_NO)
ON DELETE CASCADE;

-- 3) [MS_REPLY] 테이블의 BOARD_NO 속성을 추가하시오.
-- 3-1). MS_REPLY 의 BOARD_NO 속성을 MS_BOARD 의 BOARD_NO 를 참조하는 외래키로 지정하시오.
-- 3.2). 참조 테이블의 데이터 삭제 시, 연쇄적으로 삭제되도록 옵션을 지정하시오.
ALTER TABLE MS_REPLY ADD BOARD_NO NUMBER NOT NULL;
-- BOARD_NO 속성을 외래키로 추가
-- 참조 테이블 : MS_BOARD, 참조 속성 : BOARD_NO
-- 참조 테이블 데이터 삭제시 연쇄적으로 함께 삭제되는 옵션 지정
ALTER TABLE MS_REPLY
ADD CONSTRAINT MS_REPLY_BOARD_NO_FK
FOREIGN KEY (BOARD_NO) REFERENCES MS_BOARD(BOARD_NO)
ON DELETE CASCADE;

SELECT * FROM MS_USER;
SELECT * FROM MS_BOARD;
SELECT * FROM MS_FILE;
SELECT * FROM MS_REPLY;

-- 회원탈퇴(회원 번호 : 1 => 위에서 회원 번호 1번에 대하여 넣었던 데이터들을 모두 삭제(이건 ON DELETE CASCADE 때문에))
DELETE FROM MS_USER WHERE USER_NO = 1;

-- ON DELETE CASCADE 옵션으로 외래 키 지정 시
-- MS_USER 데이터를 삭제하면,
-- MS_BOARD에 참조된 데이터도 연쇄적으로 삭제된다.

-- MS_USER 데이터를 삭제하면,
-- MS_FILE, MS_REPLY에 참조된 데이터도 연쇄적으로 삭제된다.

-- 외래키 제약조건 정리
--ALTER TABLE 테이블명
--ADD CONSTRAINT 제약조건명 FOREIGN KEY (외래키 속성)
--REFERENCES 참조테이블(참조 속성);

-- 옵션
-- ON UPDATE        -- 참조 테이블 수정 시,
-- * CASCADE        : 자식 데이터 수정
-- * SET NULL       : 자식 데이터는 NULL
-- * SET DEFAULT    : 자식 데이터는 기본값 
-- * RESTRICT       : 자식 테이블의 참조하는 데이터가 존재하면, 부모 데이터 수정 불가
-- * NO ACTION      : 아무런 행위도 취하지 않는다(기본값)

-- ON DELETE
-- * CASCADE        : 자식 데이터 삭제
-- * SET NULL       : 자식 데이터는 NULL
-- * SET DEFAULT    : 자식 데이터는 기본값 
-- * RESTRICT       : 자식 테이블의 참조하는 데이터가 존재하면, 부모 데이터 삭제 불가
-- * NO ACTION      : 아무런 행위도 취하지 않는다(기본값)

-- jump 덤프 파일 import
DROP USER joeun CASCADE;    -- 테이블 정보를 못 가지고오는 문제로 joeun 계정 다시 생성하여 덤프 파일 import를 위해 계정 삭제

ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
CREATE USER joeun IDENTIFIED BY 123456;
ALTER USER joeun DEFAULT TABLESPACE users;  -- 여기까지 joeun 계정 다시 만드는 내용
GRANT DBA TO joeun; -- joeun 계정에 DBA 권한 부여

-- imp userid=system/123456 file=D:\LYN\SQL\joeun.dmp fromuser=joeun touser=joeun
-- CMD 창에서 덤프 파일 import

/*
    서브 쿼리(Sub Querry : 하위 질의)
    : SQL문 내부에 사용하는 SELECT 문
    * 메인쿼리 : 서브쿼리를 사용하는 최종적인 SELECT문
    
    * 서브쿼리 종류
    - 스칼라 서브쿼리 : SELECT 절에서 사용하는 서브쿼리
    - 인라인 뷰      : FROM 절에서 사용하는 서브쿼리
    - 서브 쿼리      : WHERE 절에서 사용하는 서브쿼리
*/

-- 81. <예시> 의 테이블 구조와 출력결과를 참고하여, 스칼라 서브쿼리로 출력결과를 조회하는 SQL 문을 작성하시오.
-- (사원 번호(employee), 직원명(employee), 부서명(department - emplo~테이블의 dept_id와 연결), 직급명(job - emplo~테이블의 job_code와 연결))
SELECT * FROM employee;
SELECT * FROM department;
SELECT * FROM job;


SELECT emp_id 사원번호
      ,emp_name 직원명
      ,(SELECT dept_title FROM department WHERE department.dept_id = employee.dept_code) 부서명
      ,(SELECT job_name FROM job WHERE job.job_code = employee.job_code) 직급명
FROM employee;

SELECT emp_id 사원번호
      ,emp_name 직원명
      ,(SELECT dept_title FROM department d WHERE d.dept_id = e.dept_code) 부서명
      ,(SELECT job_name FROM job j WHERE j.job_code = e.job_code) 직급명
FROM employee e;

-- 82. 의 테이블 구조와 출력결과를 참고하여, 인라인 뷰를 이용하여 부서별로 최고급여를 받는 직원을 조회하는 SQL 문을 작성하시오.

-- 1) 부서별로 최고 급여 조회
SELECT MAX(salary) AS MAX_SAL
      ,MIN(salary) AS MIN_SAL
      ,AVG(salary) AS AVG_SAL
FROM employee
GROUP BY dept_code
;

-- 2) 부서별 최고 급여 조회 결과를 서브 쿼리(인라인 뷰)로 지정
SELECT emp_id 사원번호
      ,emp_name 직원이름
      ,dept_title 부서명
      ,salary 급여
      ,max_sal 최대급여
      ,min_sal 최소급여
      ,TRUNC(avg_sal) 평균급여
FROM employee e, department d,
    (
        SELECT dept_code
              ,MAX(salary) AS MAX_SAL
              ,MIN(salary) AS MIN_SAL
              ,AVG(salary) AS AVG_SAL
        FROM employee
        GROUP BY dept_code
    ) t
WHERE e.dept_code = d.dept_id
  AND e.salary = t.max_sal
;